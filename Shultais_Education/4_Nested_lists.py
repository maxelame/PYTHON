'''Идем вглубь
Добавьте с помощью метода append к списку, который содержит буквы, символ 'c'. Список L выводить не надо.'''

L = [[1, 2], ['a', 'b'], [5, 6]]
L[1].append('c')


'''Месячный бюджет

Ниже содержится список budget с бюджетами компании по годам и месяцам. Основная последовательность отвечает за годы, а вложенные списки за месяцы конкретного года, начиная с 2019.

Напишите программу, которая принимает из аргументов командной строки два параметра: год и номер месяца (1 - январь и т.д.), а затем выводит бюджет на этот месяц.
Пример использования:
> python program.py 2019 2
> 148
 '''
import sys
year = int(sys.argv[1])
month = int(sys.argv[2])
budget = [
    [176, 148, 245, 378, 451, 568, 135, 146, 761, 414, 135, 171],  # 2019
    [211, 175, 301, 474, 569, 721, 158, 172, 972, 521, 158, 205],  # 2020
    [257, 210, 374, 599, 722, 920, 188, 206, 1246, 660, 188, 249]  # 2021
]
print(budget[year-2019][month-1])

'''Правим бюджет

Ниже содержится список budget с бюджетами компании по годам и месяцам. Основная последовательность отвечает за годы, а вложенные списки за месяцы конкретного года, начиная с 2019.

Бюджет компании записывается в тысячах, то есть значение 176 означает 176 000 рублей.

Напишите программу, которая принимает из аргументов командной строки три параметра: год, номер месяца (1 - январь и т.д.), а также новое значение для этого месяца.

После программа должна внести изменение в список, а затем посчитать и вывести размер годового бюджета. При этом данные нужно вывести в полном формате (не в тысячах) с разбивкой числа на разряды.
Пример использования:
> python program.py 2019 1 276
> 3 828 000'''

import sys
year = int(sys.argv[1])
month = int(sys.argv[2])
x = int(sys.argv[3])
budget = [
    [176, 148, 245, 378, 451, 568, 135, 146, 761, 414, 135, 171],  # 2019
    [211, 175, 301, 474, 569, 721, 158, 172, 972, 521, 158, 205],  # 2020
    [257, 210, 374, 599, 722, 920, 188, 206, 1246, 660, 188, 249]  # 2021
]
budget[year-2019][month-1] = x
year_budget = (sum(budget[year-2019])*1000)
print(("{:,}" .format(year_budget)).replace(","," "))


'''Генератор имён, часть 2

Ниже содержится список fio с вложенными фамилиями, именами и отчествами.

Напишите программу, которая принимает из аргументов командной строки три параметра: индекс фамилии, имени и отчества, а затем формирует и выводит ФИО на основе переданных параметров.
Пример использования:
> python program.py 0 0 0
> Иванов Юрий Александрович
 '''

import sys
index_f = int(sys.argv[1])
index_i = int(sys.argv[2])
index_o = int(sys.argv[3])
fio = [
    ["Иванов", "Юдашкин", "Петров", "Королева", "Коваленко"],  # Фамилии
    ["Юрий", "Андрей", "Никита", "Вероника", "Игнат", "Пётр", "Валерий"],  # Имена
    ["Александрович", "Анатольевна", "Викторовна", "Иванович"]   # Отчества
]
print("{} {} {}" .format(fio[0][index_f], fio[1][index_i], fio[2][index_o]))
#print(fio[0][index_f], fio[1][index_i], fio[2][index_o])


'''Расширяем список

Ниже содержится список products с товарами разбитыми по категориям. Каждая категория товаров помещена в отдельный вложенный список.

Напишите программу, которая принимает из аргументов командной строки список товаров и помещает его как вложенный список в products, а после выводит конечную последовательность.
Пример использования:
> python program.py яблоки груши
> [['молоко', 'кефир'], ['котлеты', 'курица', 'говядина'], ['яблоки', 'груши']]
 '''

import sys
spisok = sys.argv[1:]
products = [
    ["молоко", "кефир"],  # молочка
    ["котлеты", "курица", "говядина"]  # мясо
]
products.extend([spisok])
print(products)

'''Добавляем продукты

Ниже содержится список products с товарами разбитыми по категориям. Каждая категория товаров помещена в отдельный вложенный список.

Напишите программу, которая принимает из аргументов командной строки данные в следующем виде: первым аргументом идет индекс категории в списке products, а далее следует список товаров. Программа должна расширить вложенный список, который находится по переданному индексу, товарами, которые размещены в остальных аргументах. В конце нужно вывести получившийся список.
Пример использования:

Товары "свинина" и "телятина" попадают в список, который находится на первой по индексу позиции.
> python program.py 1 свинина телятина
> [['молоко', 'кефир'], ['котлеты', 'курица', 'говядина', 'свинина', 'телятина']]'''

import sys
index = int(sys.argv[1])
spisok = sys.argv[2:]
products = [
    ["молоко", "кефир"],  # молочка
    ["котлеты", "курица", "говядина"]  # мясо
]
products[index].extend(spisok)
print(products)





