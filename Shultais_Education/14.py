# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_prime(num):
    counter = 0
    for i in range(1, num + 1):
        if num % i == 0:
            counter += 1
    if counter > 2 or num == 1:
        return False
    else:
        return True

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_prime(n))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_prime(num):
    return len([i for i in range(1, num+1) if num % i == 0]) == 2

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_prime(n))




def is_prime(num):
    counter = 0
    for i in range(1, num + 1):
        if num % i == 0:
            counter += 1
    if counter > 2 or num == 1:
        return False
    else:
        return True


def get_next_prime(num):
    if is_prime(num):
        num += 1
    while not is_prime(num):
        num += 1
    return num


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_next_prime(n))


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_password_good(password):
    if len(password) > 7 and not password.isupper() and not password.islower() and password.isalnum() and not password.isdigit() and not password.isalpha():
        return True
    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_password_good(txt))






# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_one_away(word1, word2):
    if len(word1) == len(word2):
        counter = 0
        for i in range(len(word1)):
            if word1[i] != word2[i]:
                counter += 1
        if counter == 1:
            return True
        else:
            return False
    else:
        return False
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt1 = input()
txt2 = input()
# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_one_away(txt1, txt2))





# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_palindrome(text):
    s_list = list(text.lower())
    new_list = []
    for i in s_list:
        if i.isalpha():
            new_list.append(i)
    print(new_list)
    s = "".join(new_list)
    print(s)
    if s == s[::-1]:
        return True
    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = "Standart - smallest, sell Amstrad nats."

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_palindrome(txt))




User avatar
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫—Ä–µ–ø–ª—ë–Ω
–¢–∏–º—É—Ä üë®‚Äçüè´ –ì—É–µ–≤
3 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥

–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º —Å—Ä–µ–∑, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ:
–í–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ #191449702
Python 3

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_palindrome(text):
    symbols = [' ', ',', '.', '!', '?', '-']
    for c in symbols:
        text = text.replace(c, '')
    text = text.lower()
    return text == text[::-1]

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_palindrome(txt))




# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_correct_bracket(text):
    while text.count("()") > 0:
        text = text.replace("()","")
    if len(text) != 0:
        return False
    else:
        return True
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_correct_bracket(txt))

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_valid_password(password):
    s = password.split(":")
    flag1, flag2, flag3, flag4 = 0, 0, 0, 0
    if len(s) == 3:
        flag1 = 1  # –ø—Ä–æ–∏–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ 3—Ö —á–∏—Å–µ–ª
    if s[0] == s[0][::-1]:
        flag2 = 1  # –ø—Ä–æ–∏–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    counter = 0
    for i in range(1, int(s[1]) + 1):
        if int(s[1]) % i == 0:
            counter += 1
    if counter == 2:
        flag3 = 1  # –ø—Ä–æ–∏–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ

    if int(s[2]) % 2 == 0:
        flag4 = 1  # –ø—Ä–æ–∏–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å

    if flag1 * flag2 * flag3 * flag4 == 1:
        return True
    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
psw = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_valid_password(psw))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_valid_password(password):
    pas = [int(i) for i in password.split(':')]
    a, b = str(pas[0]), len([i for i in range(1, pas[1] + 1) if pas[1] % i == 0])
    return a == a[::-1] and b == 2 and pas[2] % 2 == 0 and len(pas) == 3

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
psw = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_valid_password(psw))


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_correct_bracket(text):
    while "()" in text:
        text = text.replace("()", "")
    if text == "":
        return True
    return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_correct_bracket(txt))




def convert_to_python_case(text):
    s = list(text)
    string = s[0].lower()
    for i in s[1:]:
        if i.isupper():
            string += "_" + i.lower()
        else:
            string += i
    return string
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_python_case(txt))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_middle_point(x1, y1, x2, y2):
    return (x1 + x2)/2, (y1 + y2)/ 2

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
x_1, y_1 = int(input()), int(input())
x_2, y_2 = int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x, y = get_middle_point(x_1, y_1, x_2, y_2)
print(x, y)


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_middle_point(x1, y1, x2, y2):
    return (x1 + x2)/2, (y1 + y2)/ 2

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
x_1, y_1 = int(input()), int(input())
x_2, y_2 = int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x, y = get_middle_point(x_1, y_1, x_2, y_2)
print(x, y)

import math
def get_circle(radius):
    return 2*math.pi*radius, math.pi*radius**2

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
r = float(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
length, square = get_circle(r)
print(length, square)




# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_circle(radius):
    pi = __import__('math').pi
    return 2 * pi * radius, pi * radius ** 2

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
r = float(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
length, square = get_circle(r)
print(length, square)



def get_circle(radius):
    from math import pi
    c = 2 * pi * radius
    s = pi * radius ** 2
    return (c, s)

r = float(input())
length, square = get_circle(r)
print(length, square)





from math import *
def solve(a, b, c):
    D = b ** 2 - 4*a*c
    if D < 0:
        return ("–ù–µ—Ç –∫–æ—Ä–Ω–µ–π")
    elif D == 0:
        return -b/(2*a), -b/(2*a)
    else:
        x1 = (-b-sqrt(D))/(2*a)
        x2 = (-b+sqrt(D))/(2*a)
        return min(x1, x2), max(x1,x2)

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
a, b, c = int(input()), int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x1, x2 = solve(a, b, c)
print(x1, x2)



def solve(a, b, c):
    return sorted([(-b - ((-b) ** 2 - 4 * a * c) ** 0.5) / (2 * a), (-b + ((-b) ** 2 - 4 * a * c) ** 0.5) / (2 * a)])

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
a, b, c = int(input()), int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x1, x2 = solve(a, b, c)
print(x1, x2)



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def draw_triangle():
    for i in range(1,8):
        print(" "* (8-i) + (i *2 - 1) * "*")

# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏




# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_shipping_cost(quantity):
    return 1000 + 120 * (quantity -1)

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_shipping_cost(n))



import math
def compute_binom(n, k):
    return int(math.factorial(n)/(math.factorial(k) * math.factorial(n-k)))

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())
k = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(compute_binom(n, k))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def number_to_words(num):
    zero_to_ninety_nine = ['–Ω–æ–ª—å', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–∏–Ω', '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–≤–∞', '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏', '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ', '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–º—å', '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å', '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –æ–¥–∏–Ω', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–∞', '—Ç—Ä–∏–¥—Ü–∞—Ç—å —Ç—Ä–∏', '—Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å —Å–µ–º—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å', '—Å–æ—Ä–æ–∫', '—Å–æ—Ä–æ–∫ –æ–¥–∏–Ω', '—Å–æ—Ä–æ–∫ –¥–≤–∞', '—Å–æ—Ä–æ–∫ —Ç—Ä–∏', '—Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ', '—Å–æ—Ä–æ–∫ –ø—è—Ç—å', '—Å–æ—Ä–æ–∫ —à–µ—Å—Ç—å', '—Å–æ—Ä–æ–∫ —Å–µ–º—å', '—Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å', '—Å–æ—Ä–æ–∫ –¥–µ–≤—è—Ç—å', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '–ø—è—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω', '–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞', '–ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏', '–ø—è—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å', '–ø—è—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å', '–ø—è—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å', '–ø—è—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å', '–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å', '—Å–µ–º—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω', '—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞', '—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏', '—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ', '—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å', '—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å', '—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å', '—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å', '—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ –æ–¥–∏–Ω', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–≤–∞', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Ç—Ä–∏', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ –ø—è—Ç—å', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ —à–µ—Å—Ç—å', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Å–µ–º—å', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ –≤–æ—Å–µ–º—å', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–µ–≤—è—Ç—å']
    return zero_to_ninety_nine[num]

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(number_to_words(n))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_month(language, number):
    lng_ru = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']

    lng_en = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
    if language == "ru":
        return lng_ru[number -1]
    else:
        return lng_en[number -1]

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
lan = input()
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_month(lan, num))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_magic(date):
    d = date.split(".")
    if int(d[0]) * int(d[1]) == int(d[2]) % 100:
        return True
    else:
        return False

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
date = input()
# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_magic(date))



# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_pangram(text):
    if len(set(text.lower().replace(" ", ""))) == 26:
        return True
    else:
        return False
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))



import random

random.seed(17)   # —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

for _ in range(10):
    print(random.randint(1, 100))

import random

print('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏... ')
print('–ó–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π:')
print(random.randint(1, 6))
print(random.randint(1, 6))



import random

again = '–¥'
while again.lower() == '–¥':
    print('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏... ')
    print('–ó–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π:')
    print(random.randint(1, 6))
    print(random.randint(1, 6))
    again = input('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ –µ—â–µ —Ä–∞–∑? (–¥ = –¥–∞, –Ω = –Ω–µ—Ç): ')



import random

for _ in range(10):
    num = random.randint(0, 1)
    if num == 0:
        print('–û—Ä–µ–ª')
    else:
        print('–†–µ—à–∫–∞')



rom random import *
for i in range(10):
    print(choice(['–û—Ä—ë–ª','–†–µ—à–∫–∞']))



[print(('–†–µ—à–∫–∞', '–û—Ä–µ–ª')[__import__('random').randint(0, 1)]) for _ in range(10)]



import random

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
random.shuffle(numbers)
print(numbers)


import random

print(random.choice('BEEGEEK'))
print(random.choice([1, 2, 3, 4]))
print(random.choice(['a', 'b', 'c', 'd']))

import random

numbers = [2, 5, 8, 9, 12]

print(random.sample(numbers, 1))
print(random.sample(numbers, 2))
print(random.sample(numbers, 3))
print(random.sample(numbers, 5))

import random

numbers = [2, 5, 8, 9, 12]

print(random.sample(numbers, 1))
print(random.sample(numbers, 2))
print(random.sample(numbers, 3))
print(random.sample(numbers, 5))



from math import ceil, log
n = int(input())
print(ceil(log(n, 2)))


a=int(input())
b=0
while a>1:
    b=b+1
    a=a/2
print(b)



import random

x = random.randint(1, 100)
print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É')


def is_valid(n:int):
    return int(n) < 100 and n.isdigit()


while True:
    num = input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: ')
    if not is_valid(num):
        print('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?')
    else:
        if int(num) < x:
            print('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        elif int(num) > x:
            print('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        else:
            print('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
            print('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É. –ï—â–µ —É–≤–∏–¥–∏–º—Å—è...')
            break




def IMT(m, l):
    imt = m / l ** 2
    if 18.5 <= imt <= 25:
        return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞"
    elif imt < 18.5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
    else:
        return "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"

m = float(input())
l = float(input())
print(IMT(m, l))
